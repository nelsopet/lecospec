[1] "test start"
[1] "Tue Jan 25 15:50:46 2022"
[1] "Testing on files:"
[1] "./test/test_data/BisonGulchQuads.envi"      
[2] "./test/test_data/TwelveMileGulchQuads1.envi"
[3] "./test/test_data/TwelveMileGulchQuads2.envi"
[1] "Configuration files:"
[1] "./test/test_configs/fg1_1.json"     "./test/test_configs/fg2_1.json"    
[3] "./test/test_configs/species_1.json"
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:51:36 2022\nTest failed for file:\n./test/test_data/BisonGulchQuads.envi using config: \n./test/test_configs/fg1_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
18: unserialize(node$con)
17: recvData.SOCKnode(con)
16: recvData(con)
15: FUN(X[[i]], ...)
14: lapply(cl[1:jobs], recvResult)
13: staticClusterApply(cl, fun, length(x), argfun)
12: clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
        FUN = fun, ...)
11: do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
        FUN = fun, ...), quote = TRUE)
10: parallel::parLapply(cluster, tiles, crop_and_save_raster) at lecospectR.R#785
9: make_tiles(input_raster, num_x = config$x_tiles, num_y = config$y_tiles, 
       save_path = config$tile_path, cluster = cl, verbose = FALSE) at lecospectR.R#1007
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:52:07 2022\nTest failed for file:\n./test/test_data/BisonGulchQuads.envi using config: \n./test/test_configs/fg2_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
18: unserialize(node$con)
17: recvData.SOCKnode(con)
16: recvData(con)
15: FUN(X[[i]], ...)
14: lapply(cl[1:jobs], recvResult)
13: staticClusterApply(cl, fun, length(x), argfun)
12: clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
        FUN = fun, ...)
11: do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
        FUN = fun, ...), quote = TRUE)
10: parallel::parLapply(cluster, tiles, crop_and_save_raster) at lecospectR.R#785
9: make_tiles(input_raster, num_x = config$x_tiles, num_y = config$y_tiles, 
       save_path = config$tile_path, cluster = cl, verbose = FALSE) at lecospectR.R#1007
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:52:34 2022\nTest failed for file:\n./test/test_data/BisonGulchQuads.envi using config: \n./test/test_configs/species_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
18: unserialize(node$con)
17: recvData.SOCKnode(con)
16: recvData(con)
15: FUN(X[[i]], ...)
14: lapply(cl[1:jobs], recvResult)
13: staticClusterApply(cl, fun, length(x), argfun)
12: clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
        FUN = fun, ...)
11: do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
        FUN = fun, ...), quote = TRUE)
10: parallel::parLapply(cluster, tiles, crop_and_save_raster) at lecospectR.R#785
9: make_tiles(input_raster, num_x = config$x_tiles, num_y = config$y_tiles, 
       save_path = config$tile_path, cluster = cl, verbose = FALSE) at lecospectR.R#1007
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:53:02 2022\nTest failed for file:\n./test/test_data/TwelveMileGulchQuads1.envi using config: \n./test/test_configs/fg1_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
18: unserialize(node$con)
17: recvData.SOCKnode(con)
16: recvData(con)
15: FUN(X[[i]], ...)
14: lapply(cl[1:jobs], recvResult)
13: staticClusterApply(cl, fun, length(x), argfun)
12: clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
        FUN = fun, ...)
11: do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
        FUN = fun, ...), quote = TRUE)
10: parallel::parLapply(cluster, tiles, crop_and_save_raster) at lecospectR.R#785
9: make_tiles(input_raster, num_x = config$x_tiles, num_y = config$y_tiles, 
       save_path = config$tile_path, cluster = cl, verbose = FALSE) at lecospectR.R#1007
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "test start"
[1] "Tue Jan 25 15:53:32 2022"
[1] "Testing on files:"
[1] "./test/test_data/BisonGulchQuads.envi"      
[2] "./test/test_data/TwelveMileGulchQuads1.envi"
[3] "./test/test_data/TwelveMileGulchQuads2.envi"
[1] "Configuration files:"
[1] "./test/test_configs/fg1_1.json"     "./test/test_configs/fg2_1.json"    
[3] "./test/test_configs/species_1.json"
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:54:05 2022\nTest failed for file:\n./test/test_data/BisonGulchQuads.envi using config: \n./test/test_configs/fg1_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:54:35 2022\nTest failed for file:\n./test/test_data/BisonGulchQuads.envi using config: \n./test/test_configs/fg2_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:55:01 2022\nTest failed for file:\n./test/test_data/BisonGulchQuads.envi using config: \n./test/test_configs/species_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:55:28 2022\nTest failed for file:\n./test/test_data/TwelveMileGulchQuads1.envi using config: \n./test/test_configs/fg1_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:55:54 2022\nTest failed for file:\n./test/test_data/TwelveMileGulchQuads1.envi using config: \n./test/test_configs/fg2_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:56:22 2022\nTest failed for file:\n./test/test_data/TwelveMileGulchQuads1.envi using config: \n./test/test_configs/species_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:56:46 2022\nTest failed for file:\n./test/test_data/TwelveMileGulchQuads2.envi using config: \n./test/test_configs/fg1_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:57:10 2022\nTest failed for file:\n./test/test_data/TwelveMileGulchQuads2.envi using config: \n./test/test_configs/fg2_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "Tue Jan 25 15:57:38 2022\nTest failed for file:\n./test/test_data/TwelveMileGulchQuads2.envi using config: \n./test/test_configs/species_1.json\nError: \nError in checkForRemoteErrors(val): one node produced an error: argument is of length zero\n"
16: serialize(data, node$con)
15: sendData.SOCKnode(con, list(type = type, data = value, tag = tag))
14: sendData(con, list(type = type, data = value, tag = tag))
13: postNode(con, "EXEC", list(fun = fun, args = args, return = return, 
        tag = tag))
12: sendCall(cl[[i]], fun, list(...))
11: parallel::clusterCall(cl, library, pk, character.only = TRUE)
10: .addPackages(cl, exclude = c("raster", "sp", getOption("rasterClusterExclude")))
9: raster::getCluster() at lecospectR.R#982
8: estimate_land_cover(raster_file, config, output_filepath = output_file, 
       use_external_bands = TRUE)
7: doTryCatch(return(expr), name, parentenv, handler)
6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
4: doTryCatch(return(expr), name, parentenv, handler)
3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
       names[nh], parentenv, handlers[[nh]])
2: tryCatchList(expr, classes, parentenv, handlers)
1: tryCatch({
       output_file <- paste0("./test/test_outputs/pred_", raster_file)
       output <- estimate_land_cover(raster_file, config, output_filepath = output_file, 
           use_external_bands = TRUE)
       append(output_files, output_file)
       print(paste0(date(), "\nTest passed for config: \n", config, 
           "and file: \n", file))
       colors <- create_color_map()
   }, warning = function(w) {
       print(paste0(date(), "\nTest completed with warnings for config: \n", 
           config, "\nand file: \n", raster_file, "\nwarnings: \n", 
           w))
   }, error = function(e) {
       print(paste0(date(), "\nTest failed for file:\n", raster_file, 
           " using config: \n", config, "\nError: \n", e))
       traceback()
   })
[1] "8 Cores Detected for processing..."
[1] "8 Cores Detected for processing..."
No traceback available 
No traceback available 
[1] "preprocessing raster at F:/Lecospec/tiles/tile_0bYSfUorxlbPTIkA.grd"
[1] "Imputing..."
  missForest iteration 1 in progress...done!
  missForest iteration 2 in progress...done!
3: h(simpleError(msg, call))
2: .handleSimpleError(function (cond) 
   .Internal(C_tryCatchHelper(addr, 1L, cond)), "object 'tile_results' not found", 
       base::quote(print(tile_results)))
1: print(tile_results)
[1] "preprocessing raster at F:/Lecospec/tiles/tile_0bYSfUorxlbPTIkA.grd"
[1] "Imputing..."
  missForest iteration 1 in progress...done!
  missForest iteration 2 in progress...done!
5: stop(gettextf("arguments imply differing number of rows: %s", 
       paste(unique(nrows), collapse = ", ")), domain = NA)
4: data.frame(..., check.names = FALSE)
3: cbind(deparse.level, ...)
2: cbind(resampled_df, veg_indices) at lecospectR.R#1139
1: process_tile(test_path_2, ml_model, cluster = cl, return_raster = TRUE, 
       save_path = "./test_raster_save.grd", suppress_output = TRUE)
[1] "8 Cores Detected for processing..."
4: stop(simpleError(msg, call = expr))
3: e$fun(obj, substitute(ex), parent.frame(), e$data)
2: foreach::foreach(i = seq_along(tile_filenames), .export = as.vector(ls(.GlobalEnv))) %dopar% 
       {
           tile_results = unlist(process_tile(tile_filename = tile_filenames[[i]], 
               ml_model = model, cluster = NULL, return_raster = TRUE, 
               return_filename = TRUE, save_path = prediction_filenames[[i]], 
               suppress_output = TRUE))
           gc()
       } at lecospectR.R#1030
1: estimate_land_cover(test_path, output_filepath = "./Output/bison_gulch_outputs_par.grd", 
       use_external_bands = TRUE)
[1] "8 Cores Detected for processing..."
4: stop(simpleError(msg, call = expr))
3: e$fun(obj, substitute(ex), parent.frame(), e$data)
2: foreach::foreach(i = seq_along(tile_filenames), .export = as.vector(ls(.GlobalEnv))) %dopar% 
       {
           tile_results = unlist(process_tile(tile_filename = tile_filenames[[i]], 
               ml_model = model, cluster = NULL, return_raster = TRUE, 
               return_filename = TRUE, save_path = prediction_filenames[[i]], 
               suppress_output = TRUE))
           gc()
       } at lecospectR.R#1034
1: estimate_land_cover(test_path, output_filepath = "./Output/bison_gulch_outputs_par.grd", 
       use_external_bands = TRUE)
4: stop(simpleError(msg, call = expr))
3: e$fun(obj, substitute(ex), parent.frame(), e$data)
2: foreach::foreach(i = seq_along(tile_filenames), .export = as.vector(ls(.GlobalEnv))) %dopar% 
       {
           tile_results = unlist(process_tile(tile_filename = tile_filenames[[i]], 
               ml_model = model, cluster = NULL, return_raster = TRUE, 
               return_filename = TRUE, save_path = prediction_filenames[[i]], 
               suppress_output = TRUE))
           gc()
       } at lecospectR.R#1034
1: estimate_land_cover(test_path, output_filepath = "./Output/bison_gulch_outputs_par.grd", 
       use_external_bands = TRUE)
